#!/bin/bash

# ============================================================================
#                                  FUNCTIONS
# ============================================================================

get_filelist() {

   local targetArrayName="$1"
   eval "${targetArrayName}=()"
   local path="${2%/}"           #remove last slash if any
   local extensionString="$3"      #ie: ".tif .TIF .tiff .TIFF"
   local extensionStringD=" "
   local listString="$4"           #ie: "01,03,05,12..."
   local listStringD=","
   local listStringE="-" #ToDo: expand '-', ej: "02,09,34-39,42" -> "02,09,34,35,36,37,38,39,42"

   local -a nameArr
   local -a extensionArr
   local f n m
  
   IFS=$listStringD read -ra nameArr <<< "$listString" 
   IFS=$extensionStringD read -ra extensionArr <<< "$extensionString" 
 
   if [ ${#nameArr[@]} -eq 0 ]
   then
      for m in "${extensionArr[@]}"
      do
        [[ "$m" ]] && f=$f$(find "$FIND_OPTIONS" "$path"/*$m -type f -printf "%f\n" 2> /dev/null)    #extension var $m cannot be null
      done
      while read -r line
      do
        [[ "$line" ]] && eval "${targetArrayName}+=(\"$line\")"
      done <<< "$f"
   else  
      for n in "${nameArr[@]}"
      do
        for m in "${extensionArr[@]}"
        do
          f=$(find "$FIND_OPTIONS" "$path"/*$n$m -type f -printf "%f\n" -quit 2> /dev/null)      #quit: getting only the first match
          [[ "$f" ]] && eval "${targetArrayName}+=(\"$f\")"
        done
      done
   fi      

#crear bash arrays desde strings
 # http://stackoverflow.com/questions/10586153/split-string-into-an-array-in-bash
 # http://stackoverflow.com/questions/918886/how-do-i-split-a-string-on-a-delimiter-in-bash

#sobre las ventajas de usar variables en vez de echo para pasar valores
 #https://klo2k.wordpress.com/2008/07/01/returning-an-array-from-a-bash-function/

}

exclude_files() {

   local targetArrayName="$1"
   local -a fileArr=("${!2}")
   local -a excludeArr=("${!3}")   # http://stackoverflow.com/questions/1063347/passing-arrays-as-parameters-in-bash
   local f e EXCLUDE
  
   for f in "${fileArr[@]}"
   do
     EXCLUDE="No"
     for e in "${excludeArr[@]}"
     do
        [[ "$e" == "$f" ]] && EXCLUDE="Yes"
     done
     [[ "$EXCLUDE" == "No" ]] && eval "${targetArrayName}+=(\"$f\")"
     #[[ "$EXCLUDE" == "No" ]] && echo "OK -> $f" #debug
   done
}

# ============================================================================
#                               Initial paremeters
# ============================================================================


tt=`date +%s` # inicio_ns=`date +%s%N`
me=`basename "$0"`

echo "== $me [$(date +%Y-%m-%d\ %T)] =="; echo

# ej: fcen-postprocessing src=/path/to/tifs wrk=/path/to/out default

# ------

# Paths to executables

 SE_BIN="/opt/src/scantailor-enhanced/scantailor-cli" #Scantailor enhanced exec path

[[ -f $SE_BIN ]] && echo "scantailor-enhanced bin path ok" || { echo "scantailor-enhanced no se encuentra en la ruta por defecto"; exit 1; }

 FILTER_BIN_DIR="$( dirname "${BASH_SOURCE[0]}" )/filters" #"~/bin/filters" /imagemagick/hpass

 # echo; echo "debug: filters files"; find $FILTER_BIN_DIR -type f; echo
 
 FILTER_HPASS_BACKGROUND_BIN="$FILTER_BIN_DIR/gimp/hp-filter"   #"$FILTER_BIN_DIR/gimp/hp-2"
 FILTER_HPASS_LOWCONTRAST_BIN="$FILTER_BIN_DIR/gimp/lcontrast"
 FILTER_AUTOLEVELS_LOWCONTRAST_BIN="$FILTER_BIN_DIR/gimp/autolevels"
 FILTER_AUTOLEVELS_DARKBG_BIN="$FILTER_BIN_DIR/gimp/autolevels-darkbg"
 FILTER_INVERTLEVELS_BIN="$FILTER_BIN_DIR/gimp/invert"
 
 declare -a FilterBinArr
 
# Default values 

 #EXT="tif"
 INPUT_EXT='.tif .TIF' 
 TIFF_EXT='.tif' #internal process extension 
                        # statement: all files processed within script are TIF except
                        #  - the source files can not be tifs
                        #  - compressed format (jpeg) to PDF (created by pdfbeans)

 # Working folders
 WORKING_BASE="$(pwd)"
 SOURCE_DIR="$(pwd)"
 PROC_DIR=".processing"
 PREPROC_DIR=".preprocessing"
 
 # include/exclude
 INCLUDE_FILES=""
 EXCLUDE_FILES=""

 # Scantailor 
 SCANTAILOR_LMODE="-l=1"     # Scantailor layout mode
 SCANTAILOR_CMODE=""         # Scantailor color mode arguments
 SCANTAILOR_SEGM_PAGE=""          # Scantailor detect page arguments
 SCANTAILOR_SEGM_CONTENT=""          # Scantailor detect page arguments
 SCANTAILOR_THRESHOLD="--threshold=0"  # Scantailor threshold arguments
 SCANTAILOR_ENABLED="Yes"
 PRETTY_FORMAT=""
 SCANTAILOR_FILTERS=""  # 1-6
 SCANTAILOR_PROJECT_PATH="" # ruta a archivo de proyecto scantailor

 SCANTAILOR_SAVE_PROJECT_MODE="No" # generar proyecto scantailor cuando se procesa
 SCANTAILOR_LOAD_PROJECT_MODE="No" # cargar opciones de scantailor a partir de un archivo de proyecto scantailor
                                   # ATENCION: esto hace que scantailor levante los archivos del proyecto y no los
                                   # indicados por los parametros de este script, sin embargo el resto de los
                                   # pasos de postproceso (tesserat y pdfbeads) si procesa los archivos indicados
 SCANTAILOR_PROCESS_AND_EXIT_MODE="No"  # procesa con scantailor y sale (idem)
 # TODO terminar de ver si todo ok aplicacion de ariables previas
 # TODO ver a fondo tema renombrado
 # actualizar a ultimas opciones scantailor profile procesor 
 
 # Tesseract
 TESSERACT_ARGS=""
 TESSERACT_OVERWRITE="Yes"
 TESSERACT_ENABLED="Yes"

 # PDFbeads
 PDFBEADS_ARGS="-b JPEG"      # jpeg2 "-b JP2"
 PDFBEADS_ENABLED="Yes"
 PDFBEADS_CLEAR="No"
 PDFBEADS_HOLDS_PROCFILES="No"
 #
 RENAMING_ENABLED="Yes"
 FIND_OPTIONS=""

# PDF PageLayout (pdfbeads -P option) 
# (Optional) A name object specifying the page layout shall be used when the document is opened:
# SinglePage Display one page at a time
# OneColumn Display the pages in one column
# TwoColumnLeft Display the pages in two columns, with odd-numbered pages on the left
# TwoColumnRight Display the pages in two columns, with odd-numbered pages on the right
# TwoPageLeft(PDF 1.5) Display the pages two at a time, with odd-numbered pages on the left
# TwoPageRight(PDF 1.5) Display the pages two at a time, with odd-numbered pages on the right
# Default value: SinglePage.


# ============================================================================
#                         Processing input arguments
# ============================================================================

while [ $# -ne 0 ]
do
    arg="$1"
    case "$arg" in
        src=*)
            SOURCE_DIR="${arg#*=}"
            ;;
        wrk=*)
            WORKING_BASE="${arg#*=}"
            [[ -z "$OUT_PDF_DIR" ]] && OUT_PDF_DIR="${WORKING_BASE}"
            [[ -z "$OUT_LOGS_DIR" ]] && OUT_LOGS_DIR="${WORKING_BASE}"
            ;;
        log=*)
            OUT_LOGS_DIR="${arg#*=}"
            ;;
        out=*)
            OUT_PDF_DIR="${arg#*=}"
            ;;
        name=*)
            OUT_PDF_NAME="${arg#*=}"
            ;;
        sct=*)    # si no se proporciona, mas adelante tomara el mismo nombre y ruta del pdf
            M="${M}sct-path=${arg#*=} "
            SCT_NAME="${arg#*=}"
            ;;
        input-extension=*)
            if [ ! -z "${arg#*=}" ]
             then
              M="${M}$arg "
              INPUT_EXT="${arg#*=}"
              INPUT_EXT=${INPUT_EXT//\*/} # remove '*' from string
              INPUT_EXT=${INPUT_EXT//\ /} # remove ' ' from string
              INPUT_EXT=${INPUT_EXT//\,/\ \.} # replace ',' -> ' .'
              INPUT_EXT=".$INPUT_EXT"
            fi
            ;;
        scantailor-disabled)
            M="${M}scantailor-disabled "
            SCANTAILOR_ENABLED="No"
            ;;
        scantailor-save-project)
            M="${M}scantailor-save-project "
            SCANTAILOR_SAVE_PROJECT_MODE="Yes"
            ;;
        scantailor-load-project)
            M="${M}scantailor-load-project "
            SCANTAILOR_LOAD_PROJECT_MODE="Yes"
            ;;
        scantailor-process-and-exit) 
            M="${M}scantailor-process-and-exit "
            SCANTAILOR_PROCESS_AND_EXIT_MODE="Yes"
            ;;
        scantailor-filters=*) 
            M="${M}scantailor-filters=${arg#*=} "
            filtros=${arg#*=}
            filtros=(${filtros//,/ })
            SC_START_FILTER=${filtros[0]}
            SC_END_FILTER=${filtros[1]}
            if [ "$SC_START_FILTER" != "" ] && [ "$SC_END_FILTER" != "" ]
             then
              SCANTAILOR_FILTERS="Yes"
            fi
            ;;
        pretty-format)
            M="${M}pretty-format "
            PRETTY_FORMAT="Yes"
            ;;
        tesseract-disabled)
            M="${M}tesseract-disabled "
            TESSERACT_ENABLED="No"
            ;;
        tesseract-not-overwrite)
            M="${M}tesseract-not-overwrite "
            TESSERACT_OVERWRITE="No"
            ;;
        pdfbeads-disabled)
            M="${M}pdfbeads-disabled "
            PDFBEADS_ENABLED="No"
            ;;
        renaming-disabled)
            M="${M}renaming-disabled "
            RENAMING_ENABLED="No"
            ;;
        layout-auto)
            M="${M}layout-auto "
            SCANTAILOR_LMODE="-l=0"
            SCANTAILOR_SEGM_PAGE="--enable-page-detection --enable-fine-tuning "
            ;;
        layout-onepage)
            M="${M}layout-onepage "
            SCANTAILOR_LMODE="-l=1"
            SCANTAILOR_SEGM_PAGE="--enable-page-detection --enable-fine-tuning "
            ;;
        layout-oneandhalf)
            M="${M}layout-oneandhalf "
            SCANTAILOR_LMODE="-l=1.5"
            SCANTAILOR_SEGM_PAGE="--enable-page-detection --enable-fine-tuning "
            ;;
        layout-twopages)
            M="${M}layout-twopages "
            SCANTAILOR_LMODE="-l=2"
            SCANTAILOR_SEGM_PAGE="--enable-page-detection --enable-fine-tuning "
            ;;
        layout-disable-page-detection)
            M="${M}layout-disable-page-detection "
            #SCANTAILOR_LMODE=""
            SCANTAILOR_SEGM_PAGE=""
            ;;
        content-detection=*)
            # cautious|normal|aggressive - default: normal
            M="${M}content-detection=${arg#*=} "
            SCANTAILOR_SEGM_CONTENT="${SCANTAILOR_SEGM_CONTENT}--content-detection=${arg#*=} "
            ;;
        margins=*)
            M="${M}margins=${arg#*=} "
            SCANTAILOR_SEGM_CONTENT="${SCANTAILOR_SEGM_CONTENT}--margins=${arg#*=} "
            ;;
        enable-auto-margins)
            M="${M}enable-auto-margins "
            SCANTAILOR_SEGM_CONTENT="${SCANTAILOR_SEGM_CONTENT}--enable-auto-margins "
            ;;
        despeckle=*)
            M="${M}desplekle=${arg#*=} "
            # off|cautious|normal|aggressive - default: normal
            SCANTAILOR_SEGM_CONTENT="${SCANTAILOR_SEGM_CONTENT}--despeckle=${arg#*=} "
            ;;
        content-detection-default)
            M="${M}content-detection-default "
            SCANTAILOR_SEGM_CONTENT="--content-detection=aggressive --margins=5 --despeckle=aggressive"
            # ojo: sobrescribe algunas opciones previas
            ;;
        content-detection-disabled)
            M="${M}content-detection-disabled "
            SCANTAILOR_SEGM_CONTENT="--disable-content-detection --margins=0"
            ;;
        bolder-text-aggressive)
            # "agruesa" eltexto
            M="${M}bolder-text-aggressive "
            SCANTAILOR_THRESHOLD="--threshold=20"
            ;;
        thinner-text-aggressive)
            M="${M}thinner-text-aggressive "
            SCANTAILOR_THRESHOLD="--threshold=-20"
            ;;
        bolder-text-normal)
            # "agruesa" eltexto
            M="${M}bolder-text-normal "
            SCANTAILOR_THRESHOLD="--threshold=10"
            ;;
        thinner-text-normal)
            M="${M}thinner-text-normal "
            SCANTAILOR_THRESHOLD="--threshold=-10"
            ;;

        picture-shape=*)
            # rectangular|free - default: free
            M="${M}picture-shape=${arg#*=} "
            SCANTAILOR_CMODE="${SCANTAILOR_CMODE}--picture-shape=${arg#*=} "
            ;;
        color-mode=*)
            # black_and_white|color_grayscale|mixed default: black_and_white;
            M="${M}color-mode=${arg#*=} "
            SCANTAILOR_CMODE="${SCANTAILOR_CMODE}--color-mode=${arg#*=} "
            ;;
        normalize-illumination)
            M="${M}normalize-illumination "        
            SCANTAILOR_CMODE="${SCANTAILOR_CMODE}--normalize-illumination --white-margins "
            ;;
        include=*)
            M="${M}include=${arg#*=} "
            INCLUDE_FILES="${arg#*=}" #ToDo
            ;;
        exclude=*)
            M="${M}exclude=${arg#*=} "
            EXCLUDE_FILES="${arg#*=}" #ToDo
            ;;
        default)
            M="${M}default "
            SCANTAILOR_SEGM_PAGE="--enable-page-detection --enable-fine-tuning"
            SCANTAILOR_SEGM_CONTENT="--disable-content-detection --margins=0"
            SCANTAILOR_CMODE="--picture-shape=rectangular --color-mode=mixed"
            # ojo: sobrescribe algunas opciones previas
            ;;
        only-text-justified)
            M="${M}only-text-justified "
            TESSERACT_ARGS="-psm 6"
            ;;
        filter-hpass-background)
            M="${M}filter-hpass-background "
            PRE_FILTER="Yes"
            FilterBinArr+=("$FILTER_HPASS_BACKGROUND_BIN")
            ;;
        filter-autolevels-lowcontrast)
            M="${M}filter-autolevels-lowcontrast "
            PRE_FILTER="Yes"
            FilterBinArr+=("$FILTER_AUTOLEVELS_LOWCONTRAST_BIN")
            ;;

        filter-hpass-lowcontrast)
            M="${M}filter-hpass-lowcontrast "
            PRE_FILTER="Yes"
            FilterBinArr+=("$FILTER_HPASS_LOWCONTRAST_BIN")
            ;;
        filter-autolevels-darkbg)
            M="${M}filter-autolevels "
            PRE_FILTER="Yes"
            FilterBinArr+=("$FILTER_AUTOLEVELS_DARKBG_BIN")
            ;;
        filter-invertlevels)
            M="${M}filter-invertlevels "
            PRE_FILTER="Yes"
            FilterBinArr+=("$FILTER_INVERTLEVELS_BIN")
            ;;
        pdfbeads-clear)
            M="${M}pdfbeads-clear "
            PDFBEADS_CLEAR="Yes"
            ;;
        pdfbeads-holds-procfiles)
            M="${M}pdfbeads-holds-procfiles "
            PDFBEADS_HOLDS_PROCFILES="Yes"
            ;;
        pdfbeads-layout=*)
            M="${M}pdfbeads-layout=${arg#*=} "
            PDFBEADS_ARGS=$PDFBEADS_ARGS" --pagelayout ${arg#*=}"
            ;;
        pdfbeads-force)
            M="${M}pdfbeads-force "
            PDFBEADS_ARGS=$PDFBEADS_ARGS"  --force-update"
            ;;
        follow-symbolic-links)
            M="${M}follow-symbolic-links "
            FIND_OPTIONS="-L"
            ;;
        clear)
            CLEAR_TMP="Yes"
            CLEAR_PDF="Yes"
            CLEAR_SCANTAILOR="Yes"
            ;;
        clear-tmp)
            CLEAR_TMP="Yes"
            ;;
        clear-pdf)
            CLEAR_PDF="Yes"
            ;;
        clear-scantailor)
            CLEAR_SCANTAILOR="Yes"
            ;;
        *)
            # BADARGS="Yes"
            echo "Error, argumento desconocido: $arg"; exit 1;
            ;;
    esac
    shift
done

# ============================================================================
#                          Set default paremeters
# ============================================================================

# PDF out file
[[ -z "$OUT_PDF_DIR" ]] && OUT_PDF_DIR="${WORKING_BASE}"
[[ -z "$OUT_PDF_NAME" ]] && OUT_PDF_NAME="tesis.pdf"

# scantailor project file
[[ -z "$SCT_NAME" ]] && SCT_NAME="${OUT_PDF_NAME%.*}.scantailor"
SCANTAILOR_PROJECT_PATH="${OUT_PDF_DIR}/${SCT_NAME}"

# Log paths
fpr=$(date +%s)
[[ -z "$OUT_LOGS_DIR" ]] && OUT_LOGS_DIR="${WORKING_BASE}"
sOCR_ERROR_PATH="${OUT_LOGS_DIR}/OCR_ERROR"
sFIL_ERROR_PATH="${OUT_LOGS_DIR}/FILTER_ERROR"
sSCT_ERROR_PATH="${OUT_LOGS_DIR}/SCANTAILOR_ERROR"
sSTATS_PATH="${OUT_LOGS_DIR}/STATS"
sLOG_PATH="${OUT_LOGS_DIR}/LOG"
sRENAMED_PATH="${OUT_LOGS_DIR}/RENAMED_FILES"

OCR_ERROR_PATH="$sOCR_ERROR_PATH-$fpr"
FIL_ERROR_PATH="$sFIL_ERROR_PATH-$fpr"
SCT_ERROR_PATH="$sSCT_ERROR_PATH-$fpr"
STATS_PATH="$sSTATS_PATH-$fpr"
LOG_PATH="$sLOG_PATH-$fpr"
RENAMED_PATH="$sRENAMED_PATH-$fpr"

CPU_INFO="${OUT_LOGS_DIR}/CPU_INFO"

#pretty format
if [ "$PRETTY_FORMAT" == "Yes" ]
 then
   PFbacksp="\b\b\b\b\b\b\b\b\b\b"
   PFforwsp='          '
   PFzero=' [ 00.00%]'
   PFformat='[% 6.2f%%]'
fi

# ============================================================================
#                          Clear & exit if "clear" option
# ============================================================================

if [ "$CLEAR_TMP" == "Yes" ]
 then
  echo "clear tmp folders:"
  d="$WORKING_BASE"
  cd "$d"
  for p in "$PROC_DIR" "$PREPROC_DIR"
  do
    [[ -d "$p" ]] && { echo " [!] clear $p in $d"; rm -fR "$p" || exit 0; }
  done
  echo "clear log files:"
  for f in "$sOCR_ERROR_PATH-"* \
    "$sLOG_PATH-"* \
    "$sSTATS_PATH-"* \
    "$sSCT_ERROR_PATH-"* \
    "$sRENAMED_PATH-"*
  do
    [[ -f "$f" ]] && { echo " [!] clear $f"; rm -f "$f" || exit 0; }
  done
fi

if [ "$CLEAR_PDF" == "Yes" ]
 then
  echo "clear pdf files:"
  PDF_FILES=$(ls -d "${OUT_PDF_DIR}"/* | grep .pdf)
  if "$PDF_FILES"
   then
     while read -r line
     do
       rm -f "$line"
     done <<< "$PDF_FILES"
  fi
fi

if [ "$CLEAR_SCANTAILOR" == "Yes" ]
 then
  echo "clear scantailor files:"
  SCANTAILOR_FILES=$(ls -d "${OUT_PDF_DIR}"/* | grep .scantailor)
  if "$SCANTAILOR_FILES"
   then
     while read -r line
     do
       rm -f "$line"
     done <<< "$SCANTAILOR_FILES"
  fi
fi

if [ "$CLEAR_TMP" == "Yes" ] || [ "$CLEAR_PDF" == "Yes" ] || [ "$CLEAR_SCANTAILOR" == "Yes" ]
 then
  echo "exit..."
  exit 0
fi

# ============================================================================
#                                   init
# ============================================================================

# check folders
[[ -d "$WORKING_BASE" ]] || { mkdir "$WORKING_BASE" || exit 0; }
[[ -d "$WORKING_BASE/$PROC_DIR" ]] || { mkdir "$WORKING_BASE/$PROC_DIR" || exit 0; }
[[ "$PRE_FILTER" == "Yes" ]] && [[ ! -d "$WORKING_BASE/$PREPROC_DIR" ]] && { mkdir "$WORKING_BASE/$PREPROC_DIR" || exit 0; }
[[ -d "$OUT_LOGS_DIR" ]] || { echo "[ERROR] no existe $OUT_LOGS_DIR"; exit 0;}

if [ "$SCANTAILOR_LOAD_PROJECT_MODE" == "Yes" ]
 then
   [[ -f "$SCANTAILOR_PROJECT_PATH" ]] || 
     { echo "[ERROR] No se puede cargar proyecto scantailor: '$SCANTAILOR_PROJECT_PATH' no existe"; exit 0; }
fi

#  exec > "$LOG_PATH" # stdout to logfile
#  exec > >(tee -a "$LOG_PATH") # stdout to term & logfile (default)
# echo "[$me] $(date +%Y-%m-%d\ %T)"
echo "Mode[s]: $M" 

( printf "=============== INFO ===============\n"
printf " Mode[s]: $M\n"
printf " Source dir: $SOURCE_DIR\n"
printf " Working base dir: $WORKING_BASE\n"
printf " Process folder:   $WORKING_BASE/$PROC_DIR\n"
printf " Pre-Process operations:     $PRE_FILTER\n"
printf " Pre-Process folder:     $WORKING_BASE/$PREPROC_DIR\n"
printf " PDF file path: $OUT_PDF_DIR/$OUT_PDF_NAME\n"
printf " Logs dir: $OUT_LOGS_DIR\n" ) >> "$LOG_PATH"

# ============================================================================
#   Set srcFiles (array of files to process with pre-filters and scantailor)
# ============================================================================

cd "$SOURCE_DIR"

declare -a srcFiles
echo -n "Find "
[[ -z "$INCLUDE_FILES" ]] && echo -n "all files " || echo -n "'$INCLUDE_FILES' "
echo -n "with '$INPUT_EXT' extensions "

#Todo: verificar funcionamiento include Y exclude a la vez
if [ "$EXCLUDE_FILES" ]
 then
   declare -a allFiles
   get_filelist "allFiles" "." "$INPUT_EXT" "$INCLUDE_FILES" #antes era ''. testear!!
   declare -a exclFiles
   get_filelist "exclFiles" "." "$INPUT_EXT" "$EXCLUDE_FILES"
   exclude_files "srcFiles" allFiles[@] exclFiles[@]
   unset allFiles exclFiles
   echo -n "and excluding '$EXCLUDE_FILES' "
 else
   get_filelist "srcFiles" "." "$INPUT_EXT" "$INCLUDE_FILES"             #if INCLUDE_FILES == "" get_filelist get all files in dir
fi
echo -n "in '$SOURCE_DIR' ..${#srcFiles[@]} files obtained .."

#alt method -> shopt -s nullglob; srcFiles=($INPUT_EXT); shopt -u nullglob;

if [ "$SCANTAILOR_ENABLED" == "Yes" ] || [ "$PRE_FILTER" == "Yes" ]
 then
  if [ -z $srcFiles ]
   then
     echo ""
     echo "ERROR: no hay archivos para ser procesados por scantailor o pre-filtros en '$SOURCE_DIR'" | tee -a "$LOG_PATH"
     exit 1
  fi
fi

echo "done"

# OJO este if da falso con array=('' foo)

# ============================================================================
#                                Process filters
# ============================================================================

if [ "$PRE_FILTER" == "Yes" ]
 then
   printf "\n============ PREFILTERS ============\n" >> "$LOG_PATH"
      
   declare -a filterFiles
   #init filter loop parameters
   let nFilter=0
   filterOutDir="$SOURCE_DIR"
   filterFiles=("${srcFiles[@]}")
                 
   for FilterBin in "${FilterBinArr[@]}"
    do
         echo -n "Prefiltering-$nFilter ${FilterBin##*/}"
         
         if [ $nFilter -gt 0 ]; then get_filelist "filterFiles" "." "$TIFF_EXT" '';  fi

         # set source dir (current dir) from previous cicle output dir
         cd "$filterOutDir"
         # set new output dir
         filterOutDir="$WORKING_BASE/$PREPROC_DIR/.filter_${nFilter}_tmp"         
         [[ -d "$filterOutDir" ]] || { mkdir "$filterOutDir" || exit 0; }

         t=`date +%s`; c=0
         for infile in "${filterFiles[@]}" 
         do
            let c=c+1 
            
            outfile="${infile%.*}$TIFF_EXT" 
            CMD_FILTER='$FilterBin "$infile" "$filterOutDir/$outfile"'
            CMD_FILTER_EXPANDED=$(eval "echo $CMD_FILTER")
               
            #echo "$CMD_FILTER_EXPANDED"
            printf "[$c]:\n$CMD_FILTER_EXPANDED\n" >> "$LOG_PATH";
            d=`date +%s`; out=$( eval $CMD_FILTER 1>/dev/null )
            printf "Time: "$(expr `date +%s` - $d)"s\n" >> "$LOG_PATH"
               
            if [ "$out" != "" ]
             then
               echo "- Warnings -" >> "$LOG_PATH"
               echo "file $c [$(date +%Y-%m-%d_%T)]:" >> "$FIL_ERROR_PATH"
               printf "$out\n\n" >> "$FIL_ERROR_PATH"
               echo -n "!"
            else
               echo -n "." 
            fi        
         done 
         echo -n "done"
         FilterTime=$(expr `date +%s` - $t); echo -n " - ${FilterTime}s - $c files"; echo
          
         let nFilter=nFilter+1
   done
else
   echo "No prefilter required."
fi

# ============================================================================
#                                SCANTAILOR 
# ============================================================================


if [ "$PRE_FILTER" == "Yes" ]
  then
   cd "$filterOutDir" # current dir for the next operation (scantailor processing) from filter files (not source)
   stailorFiles=("${filterFiles[@]}")
else
   cd "$SOURCE_DIR"
   stailorFiles=("${srcFiles[@]}")
fi

if [ "$SCANTAILOR_ENABLED" == "Yes" ]
then

   printf "\n============ SCANTAILOR ============\n" >> "$LOG_PATH"

   echo "Removing Scantailor mask files if any..."
   newl=""
   for f in "${srcFiles[@]}" 
    do 
       fname="${f%.*}"
       maskfile="$WORKING_BASE/$PROC_DIR/cache/automask/${fname}${TIFF_EXT}"
       speckfile="$WORKING_BASE/$PROC_DIR/cache/speckles/${fname}${TIFF_EXT}"
       [[ -f "$maskfile" ]] && 
            { echo "removing '$PROC_DIR/cache/automask/${fname}${TIFF_EXT}'" | tee -a "$LOG_PATH"; rm "$maskfile" 2> >(tee "$SCT_ERROR_PATH" >&2); } 
       [[ -f "$speckfile" ]] && 
            { echo "removing '$PROC_DIR/cache/speckles/${fname}${TIFF_EXT}'" | tee -a "$LOG_PATH"; rm "$speckfile" 2> >(tee "$SCT_ERROR_PATH" >&2); }
   done
   echo ""
     
   if   [ "$SCANTAILOR_LOAD_PROJECT_MODE" == "Yes" ]
    then
       echo "loading scantailor project from '$SCANTAILOR_PROJECT_PATH'" | tee -a "$LOG_PATH"
       CMD_SCANTAILOR='"$SE_BIN" -v '
       [[ "$SCANTAILOR_FILTERS" == "Yes" ]] &&
          CMD_SCANTAILOR+='--start-filter=$SC_START_FILTER --end-filter=$SC_END_FILTER '
       CMD_SCANTAILOR+='"$SCANTAILOR_PROJECT_PATH" '
       CMD_SCANTAILOR+='"$WORKING_BASE/$PROC_DIR/"'
   else
       CMD_SCANTAILOR='"$SE_BIN" -v '
       CMD_SCANTAILOR+='$SCANTAILOR_LMODE '
       CMD_SCANTAILOR+='$SCANTAILOR_SEGM_PAGE '
       CMD_SCANTAILOR+='$SCANTAILOR_SEGM_CONTENT '
       CMD_SCANTAILOR+='$SCANTAILOR_THRESHOLD '
       CMD_SCANTAILOR+='$SCANTAILOR_CMODE '
       [[ "$SCANTAILOR_SAVE_PROJECT_MODE" == "Yes" ]] &&
          CMD_SCANTAILOR+='--output-project="$SCANTAILOR_PROJECT_PATH" '
       [[ "$SCANTAILOR_FILTERS" == "Yes" ]] &&
          CMD_SCANTAILOR+='--start-filter=$SC_START_FILTER --end-filter=$SC_END_FILTER '
       CMD_SCANTAILOR+='"${stailorFiles[@]}" '
       CMD_SCANTAILOR+='"$WORKING_BASE/$PROC_DIR/"'
   fi
   
   CMD_SCANTAILOR_EXPANDED=$(eval "echo $CMD_SCANTAILOR")
   printf "[CMD]:\n $CMD_SCANTAILOR_EXPANDED \n" >> "$LOG_PATH"

   t=`date +%s`
   if [ "$PRETTY_FORMAT" == "Yes" ]
    then
       echo -n "Scantailor processing $PFzero"
       [[ "$SCANTAILOR_FILTERS" == "Yes" ]] &&
          let SC_X_FILTERS=$SC_END_FILTER-$SC_START_FILTER+1 ||
          let SC_X_FILTERS=6 ;
       let stItems=${#stailorFiles[@]}*${SC_X_FILTERS}+${SC_X_FILTERS}
       awkcom=""
       eval stdbuf -i0 -o0 -e0 $CMD_SCANTAILOR > >(tee -a "$LOG_PATH") 2> >(tee "$SCT_ERROR_PATH" >&2)  | awk -W interactive 'BEGIN{ k=100/'"$stItems"'; b="'"$PFbacksp"'" } { printf("%s", b); printf(".'"$PFforwsp"'"); printf("%s '"$PFformat"'", b, i); i=i+k }'
       printf $PFbacksp
       echo -n " done"
      # stdbuf -i0 -o0 -e0 http://unix.stackexchange.com/questions/25372/turn-off-buffering-in-pipe
      # -W interactive http://unix.stackexchange.com/questions/33650/why-does-awk-do-full-buffering-when-reading-from-a-pipe
   else
        echo -n "Scantailor processing.."
        eval $CMD_SCANTAILOR > >(tee -a "$LOG_PATH") 2> >(tee "$SCT_ERROR_PATH" >&2) | awk '{ printf "." }'; echo -n "done"
   fi
      # http://stackoverflow.com/questions/692000/how-do-i-write-stderr-to-a-file-while-using-tee-with-a-pipe

   #eval $CMD_SCANTAILOR

   ScantailorTime=$(expr `date +%s` - $t); echo -n " - ${ScantailorTime}s";

   { [[ -f "$SCT_ERROR_PATH" ]] && [[ ! -s "$SCT_ERROR_PATH" ]]; } && { rm "$SCT_ERROR_PATH"; echo -n " - No errors";}

   echo

   if [ "$SCANTAILOR_PROCESS_AND_EXIT_MODE" == "Yes" ]
    then
        # SCANTAILOR_PROCESS_AND_EXIT_MODE es "scantailor-process-**and-exit**" ignorando opciones de pdfbeads o tesseract
        PDFBEADS_ENABLED="No"
        PDFBEADS_CLEAR="No"
        TESSERACT_ENABLED="No"
        RENAMING_ENABLED="No"
   fi
else
   echo "Scantailor disabled."
fi

# ============================================================================
#                                  RENAMING 
# ============================================================================

# set current dir to Tesseract and Pdfbeads
cd "$WORKING_BASE/$PROC_DIR/"

# renaming all paths with spaces (pdfbeads bug) in this folder

if [ "$RENAMING_ENABLED" == "Yes" ]
then

   printf "\n============ RENAMING =============\n" >> "$LOG_PATH"

   echo -n "Renaming"

   for fr in *$TIFF_EXT
   do
     if [[ $fr == *\ * ]]
      then
       RENAMING="Yes"
       frWithoutSpaces=${fr// /_}
       printf " Renaming: $fr to $frWithoutSpaces\n" | tee -a "$LOG_PATH" >> "$RENAMED_PATH"
       echo -n "."
       mv -- "$fr" "$frWithoutSpaces"
          # (Los guiones previenen error de nombres de archivos que empiezan con guión)
     fi
   done

   if [ "$RENAMING" == "Yes" ]; then echo "done"; else echo " - No file had to be renamed."; fi
else
   echo "Renaming disabled."
fi

# ============================================================================
#         Set procFiles (array of files to process with tesseract)
# ============================================================================

# we are in "$WORKING_BASE/$PROC_DIR/" from previous

 # only for tesseract, pdfbeads process all existing .tif file in $PROC_DIR 
 # except PDFBEADS_HOLDS_PROCFILES == "Yes"

if [ "$TESSERACT_ENABLED" == "Yes" ] || [ "$PDFBEADS_ENABLED" == "Yes" ]
 then
    declare -a procFiles

    if [ "$EXCLUDE_FILES" ]
     then
       declare -a allFiles
       get_filelist "allFiles" "." "$TIFF_EXT" "$INCLUDE_FILES" #antes era ''. testear!!
       declare -a exclFiles
       get_filelist "exclFiles" "." "$TIFF_EXT" "$EXCLUDE_FILES"
       exclude_files "procFiles" allFiles[@] exclFiles[@]
       unset allFiles exclFiles
    else
       get_filelist "procFiles" "." "$INPUT_EXT" "$INCLUDE_FILES"          #if INCLUDE_FILES == "" get_filelist get all files in dir
    fi

    if [ -z $procFiles ]
     then
       echo "ERROR: no hay archivos para ser procesados por tesseract en '$PROC_DIR'" | tee -a "$LOG_PATH"
       exit 0
    fi
fi
     
# ============================================================================
#                                  TESSERACT
# ============================================================================

if [ "$TESSERACT_ENABLED" == "Yes" ]
then
   printf "\n============ TESSERACT =============\n" >> "$LOG_PATH"

   echo -n "Tesseract processing ${PFzero}"

   t=`date +%s`; c=0
   if [ "$PRETTY_FORMAT" == "Yes" ]
    then
      percent=0
      if [[ ${#procFiles[@]} != 0 ]]
        then
          step=$(bc <<< "scale=2; 100/${#procFiles[@]}")
       fi
   fi
   for i in "${procFiles[@]}" 
   do 
      let c=c+1 
      if [ -f "`basename "$i" "$TIFF_EXT"`.html" ] && [ "$TESSERACT_OVERWRITE" != "Yes" ]
      then
         printf "[$c]:\n$i previous OCR exist and tesseract overwrite option is disabled\n" >> "$LOG_PATH";
         printf "${PFbacksp}x${PFforwsp}" 
      else
        CMD_TESSERACT='tesseract "$i" "`basename "$i" "$TIFF_EXT"`" -l spa $TESSERACT_ARGS hocr logfile'
        # about logfile -> https://github.com/tesseract-ocr/tesseract/blob/master/tessdata/configs/logfile
        
        CMD_TESSERACT_EXPANDED=$(eval "echo $CMD_TESSERACT")
        printf "[$c]:\n$CMD_TESSERACT_EXPANDED\n" >> "$LOG_PATH";

        d=`date +%s`; eval $CMD_TESSERACT 1>/dev/null # 1>/dev/null = quiet exec
        printf "Time: "$(expr `date +%s` - $d)"s\n" >> "$LOG_PATH"
        
        [[ -f "tesseract.log" ]] && out=$(cat "tesseract.log") || out=""
        if [ "$(echo "$out" | wc -l)" -gt "2" ] #two lines log or more (usual no error log is eg. "page0")
         then
           printf "${PFbacksp}!${PFforwsp}"
           echo "- Warnings -" >> "$LOG_PATH"
           echo "file $c $i [$(date +%Y-%m-%d_%T)]:" >> "$OCR_ERROR_PATH"
           printf "$out\n\n" >> "$OCR_ERROR_PATH"
         else
           printf "${PFbacksp}.${PFforwsp}" 
        fi
        
        if [ "$PRETTY_FORMAT" == "Yes" ]
         then
           percent=$(bc <<< "$percent + $step")
           printf "${PFbacksp}"
           echo $percent | awk '{printf " '"$PFformat"'", $1}'
        fi
      fi
      
   done
   printf "${PFbacksp}"
   echo -n " done"
   TesseractTime=$(expr `date +%s` - $t); echo -n " - ${TesseractTime}s - $c pages";
   NumberOfPages=$c

   { [[ -f "$OCR_ERROR_PATH" ]] && [[ ! -s "$OCR_ERROR_PATH" ]]; } && { rm "$OCR_ERROR_PATH"; echo -n "No errors" ;}
   echo
else
   echo "Tesseract disabled."
fi

# ============================================================================
#                                   PDFBEADS
# ============================================================================


if [ "$PDFBEADS_CLEAR" == "Yes" ]
 then
  # ==== CLEAR PDFBEADS ===== ToDo: reemplazar por funcion get_filelist!
  echo "Clear PDFbeads "
  echo
  rmEXT='*.tiff *.jpg *.jbig2 *.sym'
  shopt -s nullglob; 
  rmFiles=($rmEXT); 
  shopt -u nullglob;

  if [ ! -z $rmFiles ]
   then
     for f in "${rmFiles[@]}"
     do
       echo "rm $f"
       rm "$f"
     done
  else
     echo " - no files to clear"
  fi
fi

# statement: PDFBeads process does not comply with exclude/include param, process all existing .tif file in $PROC_DIR
#            except 'pdfbeads-holds-procfiles' parameter is enabled

if [ "$PDFBEADS_ENABLED" == "Yes" ]
then
   printf "\n============ PDFBEADS ==============\n" >> "$LOG_PATH"

   t=`date +%s`

   if [[ "$PDFBEADS_HOLDS_PROCFILES" == "Yes" ]]
    then
       printf "[CMD]:\npdfbeads $PDFBEADS_ARGS ${procFiles[@]} > $OUT_PDF_DIR/$OUT_PDF_NAME\n" >> "$LOG_PATH"
       echo -n "PDFbeads processing (holds procfiles)"
       (pdfbeads $PDFBEADS_ARGS ${procFiles[@]} >"$OUT_PDF_DIR/$OUT_PDF_NAME" 2> >(tee -a "$LOG_PATH" >&2)) 2>&1 | awk -W interactive '{ printf "." }'
       echo -n "done"
   else
       # note: pdfbeads bugs -> http://ssdigit.nothingisreal.com/2012/09/experiences-with-pdfbeads.html

       #pdfbeadsFiles=(*.tif)
       #CMD_PDFBEADS='pdfbeads $PDFBEADS_ARGS "${pdfbeadsFiles[@]}" > "$OUT_PDF_DIR/$OUT_PDF_NAME"'

       #echo "[CMD]:"; echo $(eval "echo $CMD_PDFBEADS"); echo
       # eval $CMD_PDFBEADS 2>&1 

       printf "[CMD]:\npdfbeads $PDFBEADS_ARGS *$TIFF_EXT > $OUT_PDF_DIR/$OUT_PDF_NAME\n" >> "$LOG_PATH"
       echo -n "PDFbeads processing"
       (pdfbeads $PDFBEADS_ARGS *$TIFF_EXT >"$OUT_PDF_DIR/$OUT_PDF_NAME" 2> >(tee -a "$LOG_PATH" >&2)) 2>&1 | awk -W interactive '{ printf "." }'
       echo -n "done"
   fi
   
   PdfbeadsTime=$(expr `date +%s` - $t); echo " - ${PdfbeadsTime}s";
else
   echo "pdfbeads disabled"
fi


# ============================================================================
# ============================================================================


TotalTime=$(expr `date +%s` - $tt); echo "Total Time: ${TotalTime}s | Number of pages: $NumberOfPages";
if [ "$NumberOfPages" ]; then AverageTime=$(expr $TotalTime / $NumberOfPages); fi

( printf "# Document info\n\n"
printf "NumberOfPages:  $NumberOfPages\n\n"
printf "# Execution time (in seconds, integer values):\n\n"
printf "ScantailorTime: $ScantailorTime\n"
printf "TesseractTime:  $TesseractTime\n"
printf "PdfbeadsTime:   $PdfbeadsTime\n"
printf "TotalTime:      $TotalTime\n"
printf "AverageTime:    $AverageTime\n" ) | tee "$STATS_PATH" >> "$LOG_PATH"

cat /proc/cpuinfo > "$CPU_INFO"

# # [[ $str == *['!'@#\$%^\&*()_+]* ]]

# https://addons.mozilla.org/es/firefox/addon/hocr-editor/
